import requests
import json
import sys
import getopt
import pprint

API_HOST = 'https://access.redhat.com/hydra/rest/securitydata'
endpoint = '/cve.json'
#params = 'after=2022-09-01' + '&' + 'before=2022-09-06' # + 'product=openstack' + 'sevrity=important' + 'ids=CVE-2022-2735' 

def get_data(query):
    full_query = API_HOST + query
    r = requests.get(full_query)

    #print(full_query)

    if r.status_code != 200:
        print('ERROR: Invalid request; returned' + str(r.status_code) + 'for the following query: \n' + full_query)

    if not r.json():
        print('\nNo data returned with the following query: \n' + full_query)
        #print(full_query)
        print('\n')
        sys.exit(0)

    return r.json()

def pretty_print_cve(data):

    cves_printed = []
    #print("Type:" + str(type(data)))
    print('\n')

    for cve in data:

        # for each CVE, make another call to API
        cve_query = "/cve/" + cve['CVE']
        cve_data = get_data(cve_query)
   
        # variable to store affected packages
        affected_packages = {}

        # iterate over cve information and get packages
        details = cve_data["details"]

        for package in cve_data["package_state"]:
            
            name = package["product_name"]
            fix_state = package["fix_state"]
            affected_packages[name] = fix_state 
        

        if cve['CVE'] not in cves_printed:
            print('CVE Number: \t| Severity: | Public date: | URL: ')
            cves_printed.append(cve['CVE'])
            print('{:<15} | {:<9} | {:<12} | {:<50}'.format(cve['CVE'], cve['severity'], cve['public_date'][0:10], cve['resource_url']))
            print(details)
            #pprint.pprint(affected_packages)
            #print(json.dumps(affected_packages, indent=4, sort_keys=True))
            #print(*[str(k) + ' : ' + str(v) + '\n' for k,v in affected_packages.items()])
            
            print('\nAffected product: \t\t\t\t\t\t| Fix state:  ')
            for k, v in affected_packages.items():
                if v != "Not affected":
                    print('{:<63} | {:<20}'.format(k, v))
            print('-----------------------------------------------------------------------------------------------\n')
    
    print(cves_printed)

    print('\n')


def parse_input(argv):
    arg_after = ''
    arg_before = ''
    arg_product = ''
    arg_severity = ''
    #arg_skip_unaffected = ''
    arg_help = '{0} -a <after> -b <before> -p <product> -s <severity>'.format(argv[0])

    try: 
        opts, args = getopt.getopt(argv[1:], "ha:b:p:s:", ["help", "after=", "before=", "product=", "severity="])
    except:
        print(arg_help)
        sys.exit(2)

    params = ""

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print(arg_help) #print the help message
            sys.exit(2)
        elif opt in ("-a", "--after"):
            arg_after = arg
            if not params:
                params += 'after=' + arg_after
            else: 
                params += '&after=' + arg_after
        elif opt in ("-b", "--before"):
            arg_before = arg
            if not params:
                params += 'before=' + arg_before
            else:
                params += '&before=' + arg_before
        elif opt in ("-p", "--product"):
            arg_product = arg
            if not params:
                params += 'product=' + arg_product
            else:
                params += '&product=' + arg_product
        elif opt in ("-s", "--severity"):
            arg_severity = arg
            if not params:
                params += 'severity=' + arg_severity
            else:
                params += '&severity=' + arg_severity

    return params


if __name__ == "__main__":
    params = parse_input(sys.argv)

    data = get_data(endpoint + '?' + params)

    pretty_print_cve(data)